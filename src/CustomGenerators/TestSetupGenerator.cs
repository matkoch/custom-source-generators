using System;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using CustomGenerators.Utilities;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace CustomGenerators
{
    [Generator]
    public class TestSetupGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // SpinWait.SpinUntil(() => Debugger.IsAttached);

            var sourceBuilder = new StringBuilder()
                .AppendLine("// <autogenerated />");

            var compilation = context.Compilation;
            var allTypes = compilation.Assembly.GlobalNamespace.GetAllTypes();
            var testTypes = allTypes.Where(x => x.Name.EndsWith("Test")).OfType<INamedTypeSymbol>();

            void GenerateSetup(INamedTypeSymbol testType)
            {
                var implementationTypeName = testType
                    .ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
                    .TrimStart("global::")
                    .Replace("Tests", string.Empty)
                    .Replace("Test", string.Empty)
                    .Replace("..", ".");

                var implementationType = context.Compilation.GetTypeByMetadataName(implementationTypeName);
                if (implementationType == null)
                    return;

                sourceBuilder
                    .AppendLine($"namespace {testType.ContainingNamespace}")
                    .AppendLine("{")
                    .AppendLine($"    partial class {testType.Name}")
                    .AppendLine("    {");

                var constructor = implementationType.Constructors.SingleOrDefault();

                var parameters = constructor?.Parameters.Select(x => (x.Name, Type: x.Type.GetFullName())).ToList();
                var arguments = parameters?.Select(x => x.Name).Join(", ") ?? string.Empty;
                var fields = parameters
                                 ?.Select(x => $"        protected {x.Type} {x.Name} = FakeItEasy.A.Fake<{x.Type}>();")
                                 .Concat(new[] {$"        protected {implementationTypeName} SUT;"})
                             ?? Array.Empty<string>();

                sourceBuilder
                    .AppendLine(fields.Join(Environment.NewLine))
                    .AppendLine($"        public {testType.Name}() => SUT = new({arguments});");

                sourceBuilder
                    .AppendLine("    }")
                    .AppendLine("}");
            }

            foreach (var testType in testTypes)
                GenerateSetup(testType);

            var source = SourceText.From(sourceBuilder.ToString(), Encoding.UTF8);
            context.AddSource(nameof(TestSetupGenerator), source);
            // File.WriteAllText("output.txt", sourceBuilder.ToString());
        }
    }
}
